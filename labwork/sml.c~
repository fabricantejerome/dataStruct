#include <stdio.h>

/* define commands */
#define SIZE 100
#define SENTINEL -99999
#define TRUE 1
#define FALSE 0
#define READ 10
#define WRITE 11
#define LOAD 20
#define STORE 21
#define ADD 30
#define SUBTRACT 31
#define DIVIDE 32
#define MULTIPLY 33
#define BRANCH 40
#define BRANCHNEG 41
#define BRANCHZERO 42
#define HALT 43

/* function prototypes */
void load( int *loadMemory );
void execute( int *memory, int *acPtr, int *icPtr,int *irPtr, int *opCodePtr, int *opPtr );
void dump( int *memory, int accumulator, int instructionCounter, int instructionRegister, int operationCode, int operand );
int validWord( int word );

int main()
{
	int memory[ SIZE ];
	int ac = 0;
	int ic = 0;
	int opCode = 0;
	int op = 0;
	int ir = 0;
	int i;
	
	/* clear memory */
	for( i = 0; i < SIZE; i++ ){
		memory[ i ] = 0;
	}/* end for */
	
	load( memory );
	execute( memory, &ac, &ic, &ir, &opCode, &op );
	dump( memory, ac ,ic, ir, opCode, op );
	
	return 0; /* indicate success termination */
}
/* function loads instruction */
void load( int *loadMemory )
{
	long int instruction;/* current instruction */
	int i = 0; /* indexing variable */
	
	printf( "%s\n\n%s\n%s\n%s\n%s\n%s\n%s\n\n", 
		"***			Welcome to Simpletron			***",
		"*** Please enter your program one instruction ***",
		"*** ( or data word ) at a time. I will type the ***",
		"*** location number and question mark( ? ). ***",
		"*** You then type the word for that location. ***",
		"*** Type the sentinel -99999 to stop enterint ***",
		"*** your program.								***" );
	printf("00 ? ");
	scanf("%ld", &instruction );/* read instruction */
	
	/*while sentinel is not read from user */
	while( instruction != SENTINEL ){
		
		/* test instruction for validity */
		if( !validWord( instruction ) ){
			printf( "Number out of range. Please enter again\n" );
		}// end if
		else{
			loadMemory[ i++ ] = instruction;
		}// end else
		
		printf( "%02d ?", i );
		scanf( "%ld", &instruction );
	}/* end while */
}/* end function load */
/* carry out the commands */
void execute( int *memory, int *acPtr, int *icPtr,int *irPtr, int *opCodePtr, int *opPtr ){
	int fatal = FALSE; /* fatal error flag */
	int temp; /* temporary holding space */
	
	printf( "\n************START SIMPLETRON EXECUTION************\n\n" );
	
	/*separate operation code and operand */
	*irPtr = memory[ *icPtr ];
	*opCodePtr = *irPtr / 100;
	*opPtr = *irPtr % 100;
	
	/* loop while command is not HALT or fatal */
	while( *opCodePtr != HALT && fatal )
	{
		/* determine data into location in memory */
		switch( *opCodePtr )
		{
			/* read data into location in memory */
			case READ:
				printf( "Enter an integer: " );
				scanf( "%d", &temp );
				
				/* check for validity */
				while( !validWord( temp ) ){
					printf( "Number out of range. Please enter again: " );
					scanf( "%d", &temp );
				}// end while
				memory[ *opPtr ] = temp; /* write to memory */
				++( *icPtr );
				break; /* exit READ */
				
				/*write data from memory to screen */
				case WRITE:
					printf( "Contents of %02d: %d\n", *opPtr,memory[ *opPtr ] );
					break; /* exit write */
				
				/* load data from memory into accumulator */
				case LOAD:
					*acPtr = memory[ *opPtr ];
					++( *icPtr );
					break; /* exit load */
				case STORE:
					memory[ *opPtr ] = *acPtr;
					++( *icPtr );
					break; /* exit store */
				
				/* add data from memory to data in accumulator */
				case ADD:
					temp = *acPtr + memory[ *opPtr ];
					
					/* check validity */
					if( !validWord( temp ) ){
						printf( "*** FATA ERROR: Accumulator overflow ***\n" );
						printf( "*** Simpletron execution ");
						printf( "abnormally terminated ***\n" );
						fatal = TRUE;
					}/* end if */
					else{
						*acPtr = temp;
						++( *icPtr );
					}// end else
					break; // exit add
				case SUBTRACT:
					temp = *acPtr - memory[ *opPtr ];
					
					/* check validity */
					if( !validWord( temp ) ){
						printf( "*** FATA ERROR: Accumulator overflow ***\n" );
						printf( "*** Simpletron execution ");
						printf( "abnormally terminated ***\n" );
						fatal = TRUE;
					}/* end if */
					else{
						*acPtr = temp;
						++( *icPtr );
					}// end else
					break; // exit subtract
				case DIVIDE:
					/* check for divide by zero error */
					
					/* check validity */
					if( memory[ *opPtr ] ==  0 ){
						printf( "*** FATA ERROR: Attempt to divide by zero ***\n" );
						printf( "*** Simpletron execution ");
						printf( "abnormally terminated ***\n" );
						fatal = TRUE;
					}/* end if */
					else{
						*acPtr = memory[ *opPtr ];
						++( *icPtr );
					}// end else
					break; // exit divide
				/* multiply data in memory by data in accumulator */
				case MULTIPLY:		
					temp = *acPtr * memory[ *opPtr ];
					
					/* check validity */
					if( !validWord( temp ) ){
						printf( "*** FATA ERROR: Accumulator overflow ***\n" );
						printf( "*** Simpletron execution ");
						printf( "abnormally terminated ***\n" );
						fatal = TRUE;
					}/* end if */
					else{
						*acPtr = temp;
						++( *icPtr );
					}// end else
					break; // exit multiply
				
				/* branch to specific location in memory */
				case BRANCH:
					*icPtr = *opPtr;
					break; // exit branch
				
				/* branch to location in memory if accukmulator is negative */
				case BRANCHNEG:
					/* if accumulator is negative */
					if( *acPtr < 0 ){
						*icPtr = *opPtr;
					}// end if
					else{
						++( *icPtr );
					}// end else
					break; // exit branchneg
				/* branch to location in memory if accumulator is zero */
				case BRANCHZERO:
					/* if accumulator is zero */
					if( *acPtr == 0 ){
						*icPtr = *opPtr;
					}// end if
					else{
						++( *icPtr );
					}// end else
					break; // exit branchzero
				default:
					printf( "*** FATAL ERROR: Invallid opcode detected ***\n" );
					printf( "*** Simpletron execution " );
					printf("abnormally terminated ***\n" );
					fatal = TRUE;
					break; // exit default
		}// end switch
		
		/*seperate next operation code and operand */
		*irPtr = memory[ *icPtr ];
		*opCodePtr = *irPtr / 100;
		*opPtr = *irPtr % 100;
	}/* end while */
	printf( "\n************END SIMPLETRON EXECUTION************\n ");
}// end function execute
/* print out name and content of each register and memory */
void dump( int *memory, int accumulator, int instructionCounter, int instructionRegister, int operationCode, int operand )
{
	int i; // counter
	printf("\n%d\n%d\n%d\n%d\nd\n%d",
	"REGISTER:", "accumulator", accumulator, "instructioncounter",
	instructionCounter, "instructionregister", instructionRegister,
	"operationcode", operationCode, "operand", operand );
	
	printf( "\n\nMEMORY:\n" );
	
	/* print column headers */
	for( i = 0; i <= 9; i++ ){
		printf( "%5d", i );
	}// end for
	
	/* print row headers and memory contents */
	for( i = 0; i<= SIZE; i++ ){
		// print in increment of 10
		if( i % 10 == 0 ){
			printf( "\n%2d", i );
		}// end if
		printf( "%+05d", memory[ i ] );
	}// end for
	printf( "\n" );
}// end function dump
/* function test validity word */
int validWord( int word ){
	return word >= -9999 && word <= 9999;
}// end function validword
